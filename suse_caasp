#!/bin/bash
#############################################################
# Name:        Supportconfig Plugin for SUSE CaaSP
# Description: Gathers important troubleshooting information
#              about SUSE CaaSP
# License:     GPLv2
# Author:      containers-bugowner@suse.de
# Modified:    2019 October 25
#############################################################

SVER=5.0.0
RCFILE="/usr/lib/supportconfig/resources/scplugin.rc"
LOG_LINES=10000  # 0 means include the entire file

if [ -s $RCFILE ]; then
    if ! source $RCFILE; then
        echo "ERROR: Initializing resource file: $RCFILE" >&2
        exit 1
    fi
fi

HIDDEN='<<HIDDEN BY SUPPORTCONFIG PLUGIN>>'

check_rpm() {
        #echo
        RPM_NAME=$1
        #echo "#==[ Checking RPM ]=================================#"
        #echo "rpm -q $RPM_NAME"
        if rpm -q $RPM_NAME &>/dev/null; then
                #echo "Status: Package is installed"
                return 0
        else
                #echo "Status: Package is not installed"
                return 1
        fi
}

wait_trace_on() {
        if (( $VAR_OPTION_WAIT_TRACE )); then
                OPT=$1
                case $OPT in
                -t) TEE=0; shift ;;
                *) TEE=1 ;;
                esac
                LOGGING="$@"
                WT_START=$(date +%T:%N)
                log2sys "<$WT_START> $LOGGING"
                if (( $TEE )); then
                        printf "%s" "    <$WT_START> $LOGGING  " | tee -a ${LOG}/${CSFILE}
                else
                        printf "%s" "    <$WT_START> $LOGGING  "
                fi
        fi
}

wait_trace_off() {
        if (( $VAR_OPTION_WAIT_TRACE )); then
                OPT=$1
                case $OPT in
                -t) TEE=0 ;;
                *) TEE=1 ;;
                esac
                WT_END=$(date +%T:%N)
                if (( $TEE )); then
                        echo "<$WT_END>" | tee -a ${LOG}/${CSFILE}
                else
                        echo "<$WT_END>"
                fi
        fi
}

# Input: logfilename logfiles...
ADD_OPTION_LOGS=0
conf_files() {
        LOGFILE=$LOG/$1
        shift
        for CONF in $@
        do
                echo "#==[ Configuration File ]===========================#" >> $LOGFILE
                if [ -f $CONF ]; then
                        echo "# $CONF" >> $LOGFILE
                        wait_trace_on "$CONF"
                        if (( ADD_OPTION_LOGS )); then
                                cat $CONF 2>> $LOGFILE | sed -e 's/\r//g' >> $LOGFILE
                        else
                                cat $CONF 2>> $LOGFILE | sed -e '/^[[:space:]]*#/d;/^[[:space:]]*;/d;s/\r//g;/^[[:space:]]*$/d' >> $LOGFILE
                        fi
                        echo >> $LOGFILE
                        wait_trace_off
                else
                        echo "# $CONF - File not found" >> $LOGFILE
                fi
                echo >> $LOGFILE
        done
}

# Input: logfilename command
log_cmd() {
        EXIT_STATUS=0
        LOGFILE=$LOG/$1
        shift
        CMDLINE_ORIG="$@"
        CMDBIN=$(echo $CMDLINE_ORIG | awk '{print $1}')
        CMD=$(\which $CMDBIN 2>/dev/null | awk '{print $1}')
        echo "#==[ Command ]======================================#" >> $LOGFILE
        if [ -x "$CMD" ]; then
                CMDLINE=$(echo $CMDLINE_ORIG | sed -e "s!${CMDBIN}!${CMD}!")
                echo "# $CMDLINE" >> $LOGFILE
                wait_trace_on "$CMDLINE"
                echo "$CMDLINE" | bash  >> $LOGFILE 2>&1
                EXIT_STATUS=$?
                wait_trace_off
        else
                echo "# $CMDLINE_ORIG" >> $LOGFILE
                echo "ERROR: Command not found or not executible" >> $LOGFILE
                EXIT_STATUS=1
        fi
        echo >> $LOGFILE
        return $EXIT_STATUS
}

# Input: logfilename rpm
# Assumes the rpm is installed and $LOG/$RPMFILE has been created
rpm_verify() {
        RPMPATH=$LOG/$RPMFILE
        LOGFILE=$LOG/$1
        INPUT_RPM=$2
        echo "#==[ Verification ]=================================#" >> $LOGFILE
        if rpm -q $INPUT_RPM &>/dev/null
        then
                for RPM in $(rpm -q $INPUT_RPM)
                do
                        echo "# rpm -V $RPM" >> $LOGFILE
                        wait_trace_on "rpm -V $RPM"
                        rpm -V $RPM >> $LOGFILE 2>&1
                        ERR=$?
                        wait_trace_off
                        if [ $ERR -gt 0 ]; then
                                echo "# Verification Status: Differences Found" >> $LOGFILE
                        else
                                echo "# Verification Status: Passed" >> $LOGFILE
                        fi
                        echo >> $LOGFILE
                done
                #cat $RPMPATH | grep "^$INPUT_RPM " >> $LOGFILE
                #echo >> $LOGFILE
                return 0
        else
                echo "# RPM Not Installed: $INPUT_RPM" >> $LOGFILE
                echo >> $LOGFILE
                return 1
        fi
}

#############################################################
section_header "Supportconfig Plugin for SUSE CaaSP, v${SVER}"
# The plugin already hardcodes a reference to this directory above, so we're
# not introducing a new coupling with .spec files by using this absolute path here.

_find_uncompressed () {
    find "$@" ! -name \*.gz ! -name \*.bz2 ! -name \*.xz ! -name \*.key ! -name \*.crt ! -name \*.pub ! -name \*.pem
}

find_and_conf_files () {
    [ -d "$2" ] || return 0
    files=$( _find_uncompressed "$2" -type f)
    if [ -n "$files" ]; then
        conf_files $1 $files
    fi
}

find_and_log_files () {
    [ -d "$2" ] || return 0
    files=$( _find_uncompressed "$2" -type f)
    if [ -n "$files" ]; then
        log_files $1 0 $files
    fi
}

#############################################################
section_header "Checking etcd cluster ..."
OF=etcd.txt
plugin_message "All data stored in $OF"

if check_rpm curl && [ -e /usr/bin/curl ]; then
    rpm_verify $OF curl
    # Run this only on the CaaSP Master nodes
    if crictl pods | grep etcd &> /dev/null; then
        # Health check
        log_cmd $OF 'curl -Ls --cacert /etc/kubernetes/pki/etcd/ca.crt --key /etc/kubernetes/pki/etcd/server.key --cert /etc/kubernetes/pki/etcd/server.crt https://localhost:2379/health'
        # Version check
        log_cmd $OF 'curl -Ls --cacert /etc/kubernetes/pki/etcd/ca.crt --key /etc/kubernetes/pki/etcd/server.key --cert /etc/kubernetes/pki/etcd/server.crt https://localhost:2379/version'
        # Fetch the etcd container ID
        etcdcontainer=$(crictl ps --label io.kubernetes.container.name=etcd --quiet)
        # Member list
        log_cmd $OF "crictl exec $etcdcontainer sh -c \"ETCDCTL_ENDPOINTS='https://127.0.0.1:2379' ETCDCTL_CACERT='/etc/kubernetes/pki/etcd/ca.crt' ETCDCTL_CERT='/etc/kubernetes/pki/etcd/server.crt' ETCDCTL_KEY='/etc/kubernetes/pki/etcd/server.key' ETCDCTL_API=3 etcdctl member list --write-out=fields\""
        # Endpoint status
        log_cmd $OF "crictl exec $etcdcontainer sh -c \"ETCDCTL_ENDPOINTS='https://127.0.0.1:2379' ETCDCTL_CACERT='/etc/kubernetes/pki/etcd/ca.crt' ETCDCTL_CERT='/etc/kubernetes/pki/etcd/server.crt' ETCDCTL_KEY='/etc/kubernetes/pki/etcd/server.key' ETCDCTL_API=3 etcdctl endpoint status --write-out=fields\""
         # Metrics
        log_cmd $OF 'curl -Ls --cacert /etc/kubernetes/pki/etcd/ca.crt --key /etc/kubernetes/pki/etcd/server.key --cert /etc/kubernetes/pki/etcd/server.crt https://localhost:2379/metrics'
        # Disk/Network latency
        log_cmd $OF "crictl exec $etcdcontainer sh -c \"ETCDCTL_ENDPOINTS='https://127.0.0.1:2379' ETCDCTL_CACERT='/etc/kubernetes/pki/etcd/ca.crt' ETCDCTL_CERT='/etc/kubernetes/pki/etcd/server.crt' ETCDCTL_KEY='/etc/kubernetes/pki/etcd/server.key' ETCDCTL_API=3 etcdctl check perf\""
        # ETCD daemon logs
        log_cmd $OF "crictl logs -t $etcdcontainer"
        log_cmd $OF "crictl stats --id $etcdcontainer"
        # ETCD pod
        etcdpod=$(crictl ps | grep etcd | awk -F ' ' '{ print $9 }')
        log_cmd $OF "crictl inspectp $etcdpod"
    fi
fi

plugin_message Done

#############################################################
section_header "Checking kubernetes services ..."
OF=kubernetes.txt
plugin_message "All data stored in $OF"

KUBECTL_LOG=/var/log/kubernetes
if check_rpm kubernetes-client && [ -f /etc/kubernetes/admin.conf ]; then
    set -a
    export KUBECONFIG=/etc/kubernetes/admin.conf
    rpm_verify $OF kubernetes-common
    rpm_verify $OF kubernetes-client
    rpm_verify $OF kubernetes-kubeadm
    log_cmd $OF 'kubectl version'
    log_cmd $OF 'kubectl api-versions'
    log_cmd $OF 'kubectl config view'
    log_cmd $OF 'kubectl -n kube-system get pods'
    log_cmd $OF 'kubectl get events --sort-by=.metadata.creationTimestamp'
    log_cmd $OF 'kubectl get nodes'
    log_cmd $OF 'kubectl get all -A'
    log_cmd $OF 'kubectl get nodes -o yaml'
    set +a
fi
plugin_message Done

#############################################################
section_header "Checking SSL certificates ..."
OF=kubernetes-certs.txt
plugin_message "All data stored in $OF"

# Check expiration date for SSL certificates used by kubernetes cluster
if [ -d /etc/kubernetes/pki ]; then
    for certificate in /etc/kubernetes/pki/*.crt
    do
        log_cmd $OF "openssl x509 -enddate -noout -in $certificate"
    done
fi
plugin_message Done

#############################################################
section_header "Checking kubernetes-cluster-info ..."
OF=kubernetes-cluster-info.txt
plugin_message "All data stored in $OF"

KUBECTL_LOG=/var/log/kubernetes
if check_rpm kubernetes-client && [ -f /etc/kubernetes/admin.conf ]; then
    set -a
    export KUBECONFIG=/etc/kubernetes/admin.conf
    if kubectl -n kube-system cluster-info dump &>/dev/null; then
        timeout 3 kubectl cluster-info dump --output-directory=$KUBECTL_LOG; echo
        find_and_log_files $OF $KUBECTL_LOG
        rm ${KUBECTL_LOG} -fr
    fi
    find_and_conf_files $OF /etc/kubernetes
    set +a
fi
plugin_message Done

#############################################################
section_header "Checking kubelet service ..."
OF=kubelet.txt
plugin_message "All data stored in $OF"

# Fetch kubelet logs
if check_rpm kubernetes-kubelet; then
    rpm_verify $OF kubernetes-kubelet
    log_cmd $OF "systemctl status --full kubelet"
    log_cmd $OF "journalctl -u kubelet"
    log_cmd $OF "cat /var/lib/kubelet/config.yaml"
    # Should be applicable only to masters
    find_and_log_files $OF "/etc/kubernetes/manifests"
fi
plugin_message Done

#############################################################
for service in oidc-gangway oidc-dex \
                cilium-agent cilium-operator \
                kured coredns \
                kube-apiserver kube-proxy kube-scheduler kube-controller-manager; do
    section_header "Checking $service container service ..."
    OF="$service.txt"
    plugin_message "All data stored in $OF"

    # Fetch logs
    if crictl ps | grep "$service" &> /dev/null; then
        # Fetch the container ID
        container=$(crictl ps --label io.kubernetes.container.name="$service" --quiet)
        # Gather information about container
        log_cmd $OF "crictl logs -t $container"
        log_cmd $OF "crictl inspect $container"
        log_cmd $OF "crictl stats --id $container"
        # Gather information about the Pod
        pod=$(crictl ps | grep "$service" | awk -F ' ' '{ print $9 }')
        log_cmd $OF "crictl inspectp $pod"
    fi
    plugin_message Done
done

#############################################################
section_header "Checking kube-system namespace ..."
OF=kube-system.txt
plugin_message "All data stored in $OF"

KUBECTL_LOG=/var/log/kubernetes
if check_rpm kubernetes-client && [ -f /etc/kubernetes/admin.conf ]; then
    set -a
    export KUBECONFIG=/etc/kubernetes/admin.conf
    rpm_verify $OF kubernetes-client
    log_cmd $OF "kubectl get all -n kube-system -o yaml"
    set +a
fi
plugin_message Done

#############################################################
section_header "Checking crio service ..."
OF=crio.txt
plugin_message "All data stored in $OF"

if check_rpm cri-o && [ -e /usr/bin/crictl ] && [ -S /var/run/crio/crio.sock ]; then
    rpm_verify $OF cri-o
    log_cmd $OF 'crictl version'
    log_cmd $OF 'systemctl status --full crio.service'
    log_cmd $OF 'crictl info'
    log_cmd $OF 'crictl images'
    log_cmd $OF 'crictl ps --all'
    log_cmd $OF 'crictl stats --all'
    conf_files $OF /etc/crictl.yaml
    conf_files $OF /etc/sysconfig/crio
    conf_files $OF /etc/crio/crio.conf
    find_and_conf_files $OF /etc/crio/
    for i in $(crictl  ps -a 2>/dev/null | grep -v "CONTAINER" | awk '{print $1}');
    do
        log_cmd $OF "crictl stats --id $i"
        log_cmd $OF "crictl logs $i"
        log_cmd $OF "crictl inspect $i"
    done
    log_cmd $OF 'journalctl -u crio'
fi
plugin_message Done

#############################################################
section_header "Checking GPU information ..."
OF=gpu.txt
plugin_message "All data stored in $OF"

NVIDIA_SMI="/usr/bin/nvidia-smi"
NVIDIA_CONTAINER_CLI="/usr/bin/nvidia-container-cli"
if [ -x "$NVIDIA_SMI" ]
then
    log_cmd "$OF" "$NVIDIA_SMI -q"
    if [ -x "$NVIDIA_CONTAINER_CLI" ] 
    then
        log_cmd "$OF" "$NVIDIA_CONTAINER_CLI -k -d /dev/stderr --user=root:video info"
    fi
else
    log_cmd "$OF" 'echo "nvidia drivers not found"'
fi
plugin_message Done
